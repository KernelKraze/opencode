#!/usr/bin/env bash

# OpenCode 系统安装脚本
# 将 OpenCode 安装到系统中，支持多种安装方式
# 作者: KernelKraze <admin@mail.free-proletariat.dpdns.org>

set -euo pipefail

# 颜色定义
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly CYAN='\033[0;36m'
readonly BOLD='\033[1m'
readonly NC='\033[0m'

# 配置
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
readonly BUILD_DIR="$PROJECT_ROOT/build"

# 默认安装路径
readonly DEFAULT_SYSTEM_BIN="/usr/local/bin"
readonly DEFAULT_USER_BIN="$HOME/.local/bin"

# 日志函数
log_info() {
    echo -e "${BLUE}[INFO]${NC} $*" >&2
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $*" >&2
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $*" >&2
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $*" >&2
}

log_step() {
    echo -e "${CYAN}${BOLD}==>${NC} $*" >&2
}

# 检查是否为 root 用户
is_root() {
    [[ $EUID -eq 0 ]]
}

# 检查构建文件是否存在
check_build_files() {
    log_step "检查构建文件"
    
    local required_files=(
        "$BUILD_DIR/opencode"
        "$BUILD_DIR/opencode-backend"
        "$BUILD_DIR/opencode-tui"
    )
    
    for file in "${required_files[@]}"; do
        if [[ ! -f "$file" ]]; then
            log_error "构建文件不存在: $file"
            log_info "请先运行构建脚本: ./scripts/build-standalone"
            exit 1
        fi
        
        if [[ ! -x "$file" ]]; then
            log_error "构建文件不可执行: $file"
            exit 1
        fi
    done
    
    log_success "构建文件检查完成"
}

# 创建目录
ensure_directory() {
    local dir="$1"
    local sudo_required="$2"
    
    if [[ ! -d "$dir" ]]; then
        log_info "创建目录: $dir"
        if [[ "$sudo_required" == "true" ]]; then
            sudo mkdir -p "$dir"
        else
            mkdir -p "$dir"
        fi
    fi
}

# 安装文件
install_files() {
    local target_dir="$1"
    local sudo_required="$2"
    
    log_step "安装文件到 $target_dir"
    
    ensure_directory "$target_dir" "$sudo_required"
    
    local files_to_install=(
        "$BUILD_DIR/opencode"
        "$BUILD_DIR/opencode-backend"
        "$BUILD_DIR/opencode-tui"
    )
    
    for file in "${files_to_install[@]}"; do
        local filename="$(basename "$file")"
        local target="$target_dir/$filename"
        
        log_info "安装: $filename"
        
        if [[ "$sudo_required" == "true" ]]; then
            sudo cp "$file" "$target"
            sudo chmod 755 "$target"
        else
            cp "$file" "$target"
            chmod 755 "$target"
        fi
    done
    
    log_success "文件安装完成"
}

# 创建符号链接
create_symlinks() {
    local target_dir="$1"
    local sudo_required="$2"
    
    log_step "创建符号链接"
    
    # 创建主命令的符号链接
    local main_binary="$target_dir/opencode"
    
    if [[ -f "$main_binary" ]]; then
        log_info "主命令已安装: $main_binary"
        
        # 验证安装
        if [[ "$sudo_required" == "true" ]]; then
            if sudo "$main_binary" version &>/dev/null; then
                log_success "安装验证成功"
            else
                log_warning "安装验证失败，但这可能是正常的"
            fi
        else
            if "$main_binary" version &>/dev/null; then
                log_success "安装验证成功"
            else
                log_warning "安装验证失败，但这可能是正常的"
            fi
        fi
    else
        log_error "主命令安装失败"
        exit 1
    fi
}

# 更新 PATH
update_path() {
    local bin_dir="$1"
    
    # 检查是否已在 PATH 中
    if echo "$PATH" | grep -q "$bin_dir"; then
        log_info "目录已在 PATH 中: $bin_dir"
        return
    fi
    
    log_step "更新 PATH"
    
    # 确定 shell 配置文件
    local shell_config=""
    case "$SHELL" in
        */bash)
            if [[ -f "$HOME/.bashrc" ]]; then
                shell_config="$HOME/.bashrc"
            elif [[ -f "$HOME/.bash_profile" ]]; then
                shell_config="$HOME/.bash_profile"
            fi
            ;;
        */zsh)
            shell_config="$HOME/.zshrc"
            ;;
        */fish)
            shell_config="$HOME/.config/fish/config.fish"
            ;;
    esac
    
    if [[ -n "$shell_config" ]]; then
        log_info "添加到 $shell_config"
        echo "" >> "$shell_config"
        echo "# OpenCode PATH" >> "$shell_config"
        echo "export PATH=\"$bin_dir:\$PATH\"" >> "$shell_config"
        log_success "PATH 已更新，请重新加载 shell 或运行: source $shell_config"
    else
        log_warning "无法自动更新 PATH，请手动添加 $bin_dir 到您的 PATH"
    fi
}

# 系统级安装
install_system() {
    log_step "系统级安装"
    
    if ! is_root; then
        log_info "系统级安装需要 sudo 权限"
        if ! sudo -v; then
            log_error "无法获取 sudo 权限"
            exit 1
        fi
    fi
    
    install_files "$DEFAULT_SYSTEM_BIN" "true"
    create_symlinks "$DEFAULT_SYSTEM_BIN" "true"
    
    log_success "系统级安装完成"
    log_info "现在可以在任何地方使用 'opencode' 命令"
}

# 用户级安装
install_user() {
    log_step "用户级安装"
    
    install_files "$DEFAULT_USER_BIN" "false"
    create_symlinks "$DEFAULT_USER_BIN" "false"
    update_path "$DEFAULT_USER_BIN"
    
    log_success "用户级安装完成"
    log_info "请重新加载 shell 或运行: export PATH=\"$DEFAULT_USER_BIN:\$PATH\""
}

# 自定义路径安装
install_custom() {
    local custom_path="$1"
    
    log_step "自定义路径安装: $custom_path"
    
    # 检查路径是否需要 sudo
    local sudo_required="false"
    if [[ ! -w "$(dirname "$custom_path")" ]]; then
        sudo_required="true"
        log_info "目标路径需要 sudo 权限"
        if ! sudo -v; then
            log_error "无法获取 sudo 权限"
            exit 1
        fi
    fi
    
    install_files "$custom_path" "$sudo_required"
    create_symlinks "$custom_path" "$sudo_required"
    
    # 如果不在标准路径中，提示用户更新 PATH
    case "$custom_path" in
        "/usr/bin"|"/usr/local/bin"|"/bin")
            # 标准系统路径，无需更新 PATH
            ;;
        *)
            if ! echo "$PATH" | grep -q "$custom_path"; then
                log_info "请将 $custom_path 添加到您的 PATH"
                log_info "例如: export PATH=\"$custom_path:\$PATH\""
            fi
            ;;
    esac
    
    log_success "自定义路径安装完成"
}

# 卸载
uninstall() {
    local target_dir="$1"
    local sudo_required="$2"
    
    log_step "从 $target_dir 卸载"
    
    local files_to_remove=(
        "$target_dir/opencode"
        "$target_dir/opencode-backend"
        "$target_dir/opencode-tui"
    )
    
    for file in "${files_to_remove[@]}"; do
        if [[ -f "$file" ]]; then
            log_info "删除: $file"
            if [[ "$sudo_required" == "true" ]]; then
                sudo rm -f "$file"
            else
                rm -f "$file"
            fi
        fi
    done
    
    log_success "卸载完成"
}

# 显示安装状态
show_status() {
    log_step "安装状态"
    
    echo
    echo "系统路径检查:"
    for path in "/usr/local/bin" "/usr/bin" "$HOME/.local/bin"; do
        if [[ -f "$path/opencode" ]]; then
            echo "  ✓ $path/opencode ($(du -h "$path/opencode" | cut -f1))"
        else
            echo "  ✗ $path/opencode"
        fi
    done
    
    echo
    echo "PATH 检查:"
    if command -v opencode &>/dev/null; then
        local opencode_path="$(command -v opencode)"
        echo "  ✓ opencode 在 PATH 中: $opencode_path"
        
        # 尝试获取版本信息
        if "$opencode_path" version &>/dev/null; then
            echo "  版本信息:"
            "$opencode_path" version 2>/dev/null | sed 's/^/    /'
        fi
    else
        echo "  ✗ opencode 不在 PATH 中"
    fi
    echo
}

# 显示帮助
show_help() {
    cat << 'EOF'
OpenCode 系统安装脚本

用法:
  install-system [选项] [命令]

命令:
  system              系统级安装 (需要 sudo)
  user                用户级安装 (默认)
  custom <path>       安装到自定义路径
  uninstall-system    从系统路径卸载
  uninstall-user      从用户路径卸载
  status              显示安装状态
  help                显示此帮助

选项:
  --force             强制覆盖现有安装
  --dry-run           仅显示将要执行的操作

示例:
  ./scripts/install-system                    # 用户级安装
  ./scripts/install-system system             # 系统级安装
  ./scripts/install-system custom /opt/bin    # 自定义路径安装
  ./scripts/install-system status             # 查看安装状态

注意:
  - 系统级安装需要 sudo 权限
  - 用户级安装会自动更新 shell 配置文件
  - 安装前请确保已运行构建脚本
EOF
}

# 主函数
main() {
    local command="${1:-user}"
    local force=false
    local dry_run=false
    
    # 解析选项
    while [[ $# -gt 0 ]]; do
        case $1 in
            --force)
                force=true
                shift
                ;;
            --dry-run)
                dry_run=true
                shift
                ;;
            --help|-h|help)
                show_help
                exit 0
                ;;
            system|user|custom|uninstall-system|uninstall-user|status)
                command="$1"
                shift
                break
                ;;
            *)
                if [[ "$1" =~ ^-- ]]; then
                    log_error "未知选项: $1"
                    exit 1
                else
                    command="$1"
                    shift
                    break
                fi
                ;;
        esac
    done
    
    if [[ "$dry_run" == "true" ]]; then
        log_info "DRY RUN 模式 - 仅显示操作，不执行实际安装"
    fi
    
    echo "OpenCode 系统安装脚本"
    echo "===================="
    echo
    
    case "$command" in
        system)
            check_build_files
            if [[ "$dry_run" == "false" ]]; then
                install_system
            else
                log_info "将执行系统级安装到: $DEFAULT_SYSTEM_BIN"
            fi
            ;;
        user)
            check_build_files
            if [[ "$dry_run" == "false" ]]; then
                install_user
            else
                log_info "将执行用户级安装到: $DEFAULT_USER_BIN"
            fi
            ;;
        custom)
            if [[ $# -eq 0 ]]; then
                log_error "自定义安装需要指定路径"
                echo "用法: $0 custom <path>"
                exit 1
            fi
            local custom_path="$1"
            check_build_files
            if [[ "$dry_run" == "false" ]]; then
                install_custom "$custom_path"
            else
                log_info "将执行自定义路径安装到: $custom_path"
            fi
            ;;
        uninstall-system)
            if [[ "$dry_run" == "false" ]]; then
                uninstall "$DEFAULT_SYSTEM_BIN" "true"
            else
                log_info "将从系统路径卸载: $DEFAULT_SYSTEM_BIN"
            fi
            ;;
        uninstall-user)
            if [[ "$dry_run" == "false" ]]; then
                uninstall "$DEFAULT_USER_BIN" "false"
            else
                log_info "将从用户路径卸载: $DEFAULT_USER_BIN"
            fi
            ;;
        status)
            show_status
            ;;
        *)
            log_error "未知命令: $command"
            echo "使用 'help' 查看帮助"
            exit 1
            ;;
    esac
}

# 执行主函数
main "$@"