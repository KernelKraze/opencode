#!/usr/bin/env bash

# OpenCode 独立构建脚本
# 创建完全独立的系统级安装包，无需 Bun 运行时依赖
# 作者: KernelKraze <admin@mail.free-proletariat.dpdns.org>

set -euo pipefail

# 颜色定义 - 内核开发者风格
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly CYAN='\033[0;36m'
readonly BOLD='\033[1m'
readonly NC='\033[0m'

# 构建配置
readonly PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
readonly BUILD_DIR="${PROJECT_ROOT}/build"
readonly DIST_DIR="${PROJECT_ROOT}/dist"
readonly VERSION="$(cd "$PROJECT_ROOT" && git describe --tags --always --dirty 2>/dev/null || echo "dev-$(date +%Y%m%d)")"
readonly BUILD_TIME="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
readonly GIT_COMMIT="$(cd "$PROJECT_ROOT" && git rev-parse --short HEAD 2>/dev/null || echo "unknown")"

# 平台检测
detect_platform() {
    local os arch
    case "$(uname -s)" in
        Linux*)  os="linux" ;;
        Darwin*) os="darwin" ;;
        CYGWIN*|MINGW*|MSYS*) os="windows" ;;
        *) log_error "不支持的操作系统: $(uname -s)" && exit 1 ;;
    esac
    
    case "$(uname -m)" in
        x86_64|amd64) arch="amd64" ;;
        aarch64|arm64) arch="arm64" ;;
        armv7l) arch="arm" ;;
        *) log_error "不支持的架构: $(uname -m)" && exit 1 ;;
    esac
    
    echo "${os}-${arch}"
}

readonly PLATFORM="$(detect_platform)"

# 日志函数 - 内核风格
log_info() {
    echo -e "${BLUE}[INFO]${NC} $*" >&2
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $*" >&2
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $*" >&2
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $*" >&2
}

log_step() {
    echo -e "${CYAN}${BOLD}==>${NC} $*" >&2
}

# 检查依赖
check_dependencies() {
    log_step "检查构建依赖"
    
    local missing_deps=()
    
    # 检查 Bun
    if ! command -v bun &>/dev/null; then
        missing_deps+=("bun")
    fi
    
    # 检查 Go
    if ! command -v go &>/dev/null; then
        missing_deps+=("go")
    fi
    
    # 检查 Node.js (备用)
    if ! command -v node &>/dev/null && ! command -v bun &>/dev/null; then
        missing_deps+=("node")
    fi
    
    if [[ ${#missing_deps[@]} -ne 0 ]]; then
        log_error "缺少必要的构建工具: ${missing_deps[*]}"
        log_info "安装指南:"
        for dep in "${missing_deps[@]}"; do
            case $dep in
                "bun")
                    echo "  - Bun: curl -fsSL https://bun.sh/install | bash"
                    ;;
                "go")
                    echo "  - Go: https://golang.org/dl/"
                    ;;
                "node")
                    echo "  - Node.js: https://nodejs.org/"
                    ;;
            esac
        done
        exit 1
    fi
    
    log_success "构建依赖检查完成"
}

# 清理构建目录
clean_build() {
    log_step "清理构建环境"
    
    rm -rf "$BUILD_DIR" "$DIST_DIR"
    mkdir -p "$BUILD_DIR" "$DIST_DIR"
    
    log_success "构建环境已清理"
}

# 安装依赖
install_dependencies() {
    log_step "安装项目依赖"
    
    cd "$PROJECT_ROOT"
    
    # 安装 Node.js 依赖
    log_info "安装 TypeScript 依赖..."
    bun install --frozen-lockfile
    
    # 安装 Go 依赖
    log_info "下载 Go 模块..."
    cd packages/tui
    go mod download
    go mod verify
    cd "$PROJECT_ROOT"
    
    log_success "依赖安装完成"
}

# 构建 TypeScript 后端为独立可执行文件
build_backend() {
    log_step "构建 TypeScript 后端"
    
    cd "$PROJECT_ROOT/packages/opencode"
    
    # 类型检查
    log_info "执行类型检查..."
    bun run typecheck
    
    # 使用 Bun 构建独立可执行文件，嵌入 TUI 二进制
    log_info "构建独立可执行文件..."
    
    # 首先确保 TUI 二进制文件已构建
    if [[ ! -f "$BUILD_DIR/opencode-tui" ]]; then
        log_error "TUI 二进制文件不存在，请先构建 TUI"
        exit 1
    fi
    
    # 使用 Bun 构建并嵌入 TUI 二进制文件
    bun build src/index.ts \
        --compile \
        --outfile="$BUILD_DIR/opencode-backend" \
        --target=bun \
        --minify \
        --sourcemap=external \
        --embed="$BUILD_DIR/opencode-tui"
    
    # 验证构建结果
    if [[ ! -f "$BUILD_DIR/opencode-backend" ]]; then
        log_error "后端构建失败"
        exit 1
    fi
    
    # 设置执行权限
    chmod +x "$BUILD_DIR/opencode-backend"
    
    log_success "后端构建完成: $(du -h "$BUILD_DIR/opencode-backend" | cut -f1)"
}

# 构建 Go TUI 客户端
build_tui() {
    log_step "构建 Go TUI 客户端"
    
    cd "$PROJECT_ROOT/packages/tui"
    
    # 设置构建标志
    local ldflags=(
        "-s" "-w"  # 去除调试信息和符号表
        "-X" "main.Version=$VERSION"
        "-X" "main.BuildTime=$BUILD_TIME"
        "-X" "main.GitCommit=$GIT_COMMIT"
    )
    
    # 构建当前平台版本
    log_info "构建 $PLATFORM 版本..."
    CGO_ENABLED=0 go build \
        -ldflags="${ldflags[*]}" \
        -trimpath \
        -o "$BUILD_DIR/opencode-tui" \
        ./cmd/opencode/main.go
    
    # 验证构建结果
    if [[ ! -f "$BUILD_DIR/opencode-tui" ]]; then
        log_error "TUI 构建失败"
        exit 1
    fi
    
    log_success "TUI 构建完成: $(du -h "$BUILD_DIR/opencode-tui" | cut -f1)"
}

# 创建启动脚本
create_launcher() {
    log_step "创建启动脚本"
    
    # 创建主启动脚本
    cat > "$BUILD_DIR/opencode" << 'EOF'
#!/bin/bash
# OpenCode 启动脚本
# 自动检测并启动适当的组件

set -euo pipefail

# 获取脚本所在目录
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BACKEND_BIN="$SCRIPT_DIR/opencode-backend"
TUI_BIN="$SCRIPT_DIR/opencode-tui"

# 错误处理
error_exit() {
    echo "错误: $1" >&2
    exit 1
}

# 检查二进制文件
[[ -x "$BACKEND_BIN" ]] || error_exit "后端二进制文件不存在或不可执行: $BACKEND_BIN"
[[ -x "$TUI_BIN" ]] || error_exit "TUI 二进制文件不存在或不可执行: $TUI_BIN"

# 解析命令行参数
case "${1:-}" in
    "tui"|"ui"|"")
        # 默认启动 TUI - 通过后端启动
        # 移除 "tui" 或 "ui" 参数，因为后端默认就是启动 TUI
        if [[ "${1:-}" == "tui" || "${1:-}" == "ui" ]]; then
            shift
        fi
        exec "$BACKEND_BIN" "$@"
        ;;
    "backend"|"server"|"serve")
        # 启动后端服务模式
        shift
        exec "$BACKEND_BIN" serve "$@"
        ;;
    "version"|"--version"|"-v")
        # 显示版本信息
        echo "OpenCode Standalone Build"
        "$BACKEND_BIN" --version 2>/dev/null || echo "Backend: unknown"
        # 注意：TUI 版本信息通过后端获取，不直接调用 TUI 二进制
        ;;
    "help"|"--help"|"-h")
        # 显示帮助
        cat << 'HELP'
OpenCode - AI-powered development assistant

用法:
  opencode [project]          启动 TUI 界面 (默认)
  opencode tui [project]      启动 TUI 界面
  opencode serve              启动后端服务模式
  opencode run [message...]   运行 opencode 并发送消息
  opencode auth               管理认证凭据
  opencode models             列出所有可用模型
  opencode version            显示版本信息
  opencode help               显示此帮助

选项:
  -m, --model MODEL           指定使用的模型
  -p, --prompt PROMPT         指定初始提示
  --mode MODE                 指定模式
  --log-level LEVEL           日志级别 (DEBUG, INFO, WARN, ERROR)

环境变量:
  OPENCODE_CONFIG_DIR         配置目录路径
  OPENCODE_DATA_DIR           数据目录路径
  OPENCODE_LOG_LEVEL          日志级别

更多信息: https://opencode.ai/docs
HELP
        ;;
    *)
        # 传递给后端处理
        exec "$BACKEND_BIN" "$@"
        ;;
esac
EOF
    
    chmod +x "$BUILD_DIR/opencode"
    
    log_success "启动脚本创建完成"
}

# 复制资源文件
copy_resources() {
    log_step "复制资源文件"
    
    # 复制文档
    cp "$PROJECT_ROOT/README" "$BUILD_DIR/" 2>/dev/null || echo "# OpenCode" > "$BUILD_DIR/README.md"
    cp "$PROJECT_ROOT/LICENSE" "$BUILD_DIR/" 2>/dev/null || echo "MIT License" > "$BUILD_DIR/LICENSE"
    
    # 创建版本信息文件
    cat > "$BUILD_DIR/VERSION" << EOF
OpenCode Standalone Build
Version: $VERSION
Build Time: $BUILD_TIME
Git Commit: $GIT_COMMIT
Platform: $PLATFORM
EOF
    
    log_success "资源文件复制完成"
}

# 创建安装包
create_package() {
    log_step "创建安装包"
    
    local package_name="opencode-${VERSION}-${PLATFORM}"
    local package_dir="$DIST_DIR/$package_name"
    
    # 创建包目录
    mkdir -p "$package_dir"
    
    # 复制所有文件
    cp -r "$BUILD_DIR"/* "$package_dir/"
    
    # 创建压缩包
    cd "$DIST_DIR"
    tar -czf "${package_name}.tar.gz" "$package_name"
    
    # 创建校验和
    sha256sum "${package_name}.tar.gz" > "${package_name}.tar.gz.sha256"
    
    log_success "安装包创建完成: ${package_name}.tar.gz"
    log_info "包大小: $(du -h "${package_name}.tar.gz" | cut -f1)"
}

# 运行测试
run_tests() {
    log_step "运行构建测试"
    
    # 测试后端
    log_info "测试后端二进制..."
    if "$BUILD_DIR/opencode-backend" --version &>/dev/null; then
        log_success "后端测试通过"
    else
        log_warning "后端版本检查失败，但这可能是正常的"
    fi
    
    # 测试 TUI
    log_info "测试 TUI 二进制..."
    if "$BUILD_DIR/opencode-tui" --help &>/dev/null; then
        log_success "TUI 测试通过"
    else
        log_warning "TUI 帮助检查失败，但这可能是正常的"
    fi
    
    # 测试启动脚本
    log_info "测试启动脚本..."
    if "$BUILD_DIR/opencode" version &>/dev/null; then
        log_success "启动脚本测试通过"
    else
        log_warning "启动脚本测试失败"
    fi
}

# 显示构建结果
show_results() {
    log_step "构建完成"
    
    echo
    echo "构建信息:"
    echo "  版本: $VERSION"
    echo "  平台: $PLATFORM"
    echo "  构建时间: $BUILD_TIME"
    echo "  Git 提交: $GIT_COMMIT"
    echo
    
    echo "构建产物:"
    ls -lh "$BUILD_DIR"/* | sed 's/^/  /'
    echo
    
    if [[ -d "$DIST_DIR" ]] && [[ -n "$(ls -A "$DIST_DIR" 2>/dev/null)" ]]; then
        echo "发布包:"
        ls -lh "$DIST_DIR"/*.tar.gz 2>/dev/null | sed 's/^/  /' || true
        echo
    fi
    
    echo "安装方法:"
    echo "  1. 本地测试: $BUILD_DIR/opencode"
    echo "  2. 系统安装: sudo cp $BUILD_DIR/opencode* /usr/local/bin/"
    echo "  3. 用户安装: cp $BUILD_DIR/opencode* ~/.local/bin/"
    echo "  4. 分发安装: 解压 tar.gz 包到目标目录"
    echo
}

# 主函数
main() {
    echo "OpenCode 独立构建脚本"
    echo "======================"
    echo "版本: $VERSION"
    echo "平台: $PLATFORM"
    echo "构建时间: $BUILD_TIME"
    echo

    check_dependencies
    clean_build
    install_dependencies
    build_tui
    build_backend
    create_launcher
    copy_resources
    
    if [[ "${SKIP_TESTS:-}" != "1" ]]; then
        run_tests
    fi
    
    if [[ "${SKIP_PACKAGE:-}" != "1" ]]; then
        create_package
    fi
    
    show_results
}

# 命令行参数处理
while [[ $# -gt 0 ]]; do
    case $1 in
        --clean-only)
            clean_build
            exit 0
            ;;
        --backend-only)
            check_dependencies
            install_dependencies
            build_backend
            exit 0
            ;;
        --tui-only)
            check_dependencies
            build_tui
            exit 0
            ;;
        --skip-tests)
            export SKIP_TESTS=1
            ;;
        --skip-package)
            export SKIP_PACKAGE=1
            ;;
        --help|-h)
            cat << 'HELP'
用法: build [选项]

选项:
  --clean-only      仅清理构建目录
  --backend-only    仅构建后端
  --tui-only        仅构建 TUI
  --skip-tests      跳过测试
  --skip-package    跳过打包
  --help, -h        显示此帮助

环境变量:
  SKIP_TESTS=1      跳过测试
  SKIP_PACKAGE=1    跳过打包
HELP
            exit 0
            ;;
        *)
            log_error "未知选项: $1"
            echo "使用 --help 查看帮助"
            exit 1
            ;;
    esac
    shift
done

# 执行主函数
main